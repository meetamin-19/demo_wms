

class ResGetReceivingData {
  ResGetReceivingData({
    this.success,
    this.message,
    this.data,
    this.statusCode,
    this.statusValueCode,
  });

  bool? success;
  String? message;
  ResGetReceivingProcessData? data;
  int? statusCode;
  int? statusValueCode;

  factory ResGetReceivingData.fromJson(Map<String, dynamic> json) => ResGetReceivingData(
    success: json["success"] == null ? null : json["success"],
    message: json["message"] == null ? null : json["message"],
    data: json["data"] == null ? null : ResGetReceivingProcessData.fromJson(json["data"]),
    statusCode: json["statusCode"] == null ? null : json["statusCode"],
    statusValueCode: json["statusValueCode"] == null ? null : json["statusValueCode"],
  );

  Map<String, dynamic> toJson() => {
    "success": success == null ? null : success,
    "message": message == null ? null : message,
    "data": data == null ? null : data!.toJson(),
    "statusCode": statusCode == null ? null : statusCode,
    "statusValueCode": statusValueCode == null ? null : statusValueCode,
  };
}

class ResGetReceivingProcessData {
  ResGetReceivingProcessData({
    this.container,
    this.companyList,
  });

  ContainerData? container;
  List<CompanyList>? companyList;

  factory ResGetReceivingProcessData.fromJson(Map<String, dynamic> json) => ResGetReceivingProcessData(
    container: json["container"] == null ? null : ContainerData.fromJson(json["container"]),
    companyList: json["companyList"] == null ? null : List<CompanyList>.from(json["companyList"].map((x) => CompanyList.fromJson(x))),
  );

  Map<String, dynamic> toJson() => {
    "container": container == null ? null : container?.toJson(),
    "companyList": companyList == null ? null : List<dynamic>.from(companyList!.map((x) => x.toJson())),
  };
}

class CompanyList {
  CompanyList({
    this.companyId,
    this.companyCode,
    this.companyName,
    this.companyNickName,
    this.companyDetail,
    this.companyRegistrationNo,
    this.companyTaxNo,
    this.companyAddress1,
    this.companyAddress2,
    this.companyCity,
    this.companyZipCode,
    this.companyState,
    this.companyCountry,
    this.companyPhoneNo,
    this.contactPersonName,
    this.contactPersonPhoneNo,
    this.companyEmail,
    this.remitTo,
    this.createdBy,
    this.createdOn,
    this.updatedBy,
    this.updatedOn,
    this.isActive,
    this.updateLog,
    this.companyLogo,
    this.contactPersonEmail,
    this.totalCount,
    this.rowNo,
    this.isEdit,
    this.registrationDate,
    this.chequeMailTo,
    this.addressIdChequeMailToAddress,
    this.totalParts,
    this.notScannedParts,
    this.scannedParts,
    this.isAutoGeneratedCode,
    this.autoGeneratedCode,
    this.companyLogoPic,
    this.templateId,
    this.companyAddressForAsn,
    this.isInvoiceCreatedOrNot,
    this.companyColorCode,
  });

  int? companyId;
  String? companyCode;
  String? companyName;
  String? companyNickName;
  String? companyDetail;
  String? companyRegistrationNo;
  String? companyTaxNo;
  String? companyAddress1;
  String? companyAddress2;
  String? companyCity;
  String? companyZipCode;
  String? companyState;
  String? companyCountry;
  String? companyPhoneNo;
  String? contactPersonName;
  String? contactPersonPhoneNo;
  String? companyEmail;
  String? remitTo;
  int? createdBy;
  DateTime? createdOn;
  int? updatedBy;
  DateTime? updatedOn;
  bool? isActive;
  DateTime? updateLog;
  String? companyLogo;
  String? contactPersonEmail;
  int? totalCount;
  int? rowNo;
  bool? isEdit;
  dynamic registrationDate;
  dynamic chequeMailTo;
  dynamic addressIdChequeMailToAddress;
  int? totalParts;
  int? notScannedParts;
  int? scannedParts;
  bool? isAutoGeneratedCode;
  String? autoGeneratedCode;
  dynamic companyLogoPic;
  int? templateId;
  String? companyAddressForAsn;
  bool? isInvoiceCreatedOrNot;
  dynamic companyColorCode;

  factory CompanyList.fromJson(Map<String, dynamic> json) => CompanyList(
    companyId: json["companyID"] == null ? null : json["companyID"],
    companyCode: json["companyCode"] == null ? null : json["companyCode"],
    companyName: json["companyName"] == null ? null : json["companyName"],
    companyNickName: json["companyNickName"],
    companyDetail: json["companyDetail"],
    companyRegistrationNo: json["companyRegistrationNo"] == null ? null : json["companyRegistrationNo"],
    companyTaxNo: json["companyTaxNo"] == null ? null : json["companyTaxNo"],
    companyAddress1: json["companyAddress1"] == null ? null : json["companyAddress1"],
    companyAddress2: json["companyAddress2"],
    companyCity: json["companyCity"] == null ? null : json["companyCity"],
    companyZipCode: json["companyZipCode"] == null ? null : json["companyZipCode"],
    companyState: json["companyState"] == null ? null : json["companyState"],
    companyCountry: json["companyCountry"] == null ? null : json["companyCountry"],
    companyPhoneNo: json["companyPhoneNo"] == null ? null : json["companyPhoneNo"],
    contactPersonName: json["contactPersonName"] == null ? null : json["contactPersonName"],
    contactPersonPhoneNo: json["contactPersonPhoneNo"] == null ? null : json["contactPersonPhoneNo"],
    companyEmail: json["companyEmail"] == null ? null : json["companyEmail"],
    remitTo: json["remitTo"] == null ? null : json["remitTo"],
    createdBy: json["createdBy"] == null ? null : json["createdBy"],
    createdOn: json["createdOn"] == null ? null : DateTime.parse(json["createdOn"]),
    updatedBy: json["updatedBy"] == null ? null : json["updatedBy"],
    updatedOn: json["updatedOn"] == null ? null : DateTime.parse(json["updatedOn"]),
    isActive: json["isActive"] == null ? null : json["isActive"],
    updateLog: json["updateLog"] == null ? null : DateTime.parse(json["updateLog"]),
    companyLogo: json["companyLogo"] == null ? null : json["companyLogo"],
    contactPersonEmail: json["contactPersonEmail"] == null ? null : json["contactPersonEmail"],
    totalCount: json["totalCount"] == null ? null : json["totalCount"],
    rowNo: json["rowNo"] == null ? null : json["rowNo"],
    isEdit: json["isEdit"] == null ? null : json["isEdit"],
    registrationDate: json["registrationDate"],
    chequeMailTo: json["chequeMailTo"],
    addressIdChequeMailToAddress: json["addressID_ChequeMailToAddress"],
    totalParts: json["totalParts"] == null ? null : json["totalParts"],
    notScannedParts: json["notScannedParts"] == null ? null : json["notScannedParts"],
    scannedParts: json["scannedParts"] == null ? null : json["scannedParts"],
    isAutoGeneratedCode: json["isAutoGeneratedCode"] == null ? null : json["isAutoGeneratedCode"],
    autoGeneratedCode: json["autoGeneratedCode"],
    companyLogoPic: json["companyLogoPic"],
    templateId: json["templateID"] == null ? null : json["templateID"],
    companyAddressForAsn: json["companyAddressForASN"] == null ? null : json["companyAddressForASN"],
    isInvoiceCreatedOrNot: json["isInvoiceCreatedOrNot"] == null ? null : json["isInvoiceCreatedOrNot"],
    companyColorCode: json["companyColorCode"],
  );

  Map<String, dynamic> toJson() => {
    "companyID": companyId == null ? null : companyId,
    "companyCode": companyCode == null ? null : companyCode,
    "companyName": companyName == null ? null : companyName,
    "companyNickName": companyNickName,
    "companyDetail": companyDetail,
    "companyRegistrationNo": companyRegistrationNo == null ? null : companyRegistrationNo,
    "companyTaxNo": companyTaxNo == null ? null : companyTaxNo,
    "companyAddress1": companyAddress1 == null ? null : companyAddress1,
    "companyAddress2": companyAddress2,
    "companyCity": companyCity == null ? null : companyCity,
    "companyZipCode": companyZipCode == null ? null : companyZipCode,
    "companyState": companyState == null ? null : companyState,
    "companyCountry": companyCountry == null ? null : companyCountry,
    "companyPhoneNo": companyPhoneNo == null ? null : companyPhoneNo,
    "contactPersonName": contactPersonName == null ? null : contactPersonName,
    "contactPersonPhoneNo": contactPersonPhoneNo == null ? null : contactPersonPhoneNo,
    "companyEmail": companyEmail == null ? null : companyEmail,
    "remitTo": remitTo == null ? null : remitTo,
    "createdBy": createdBy == null ? null : createdBy,
    "createdOn": createdOn == null ? null : createdOn?.toIso8601String(),
    "updatedBy": updatedBy == null ? null : updatedBy,
    "updatedOn": updatedOn == null ? null : updatedOn?.toIso8601String(),
    "isActive": isActive == null ? null : isActive,
    "updateLog": updateLog == null ? null : updateLog?.toIso8601String(),
    "companyLogo": companyLogo == null ? null : companyLogo,
    "contactPersonEmail": contactPersonEmail == null ? null : contactPersonEmail,
    "totalCount": totalCount == null ? null : totalCount,
    "rowNo": rowNo == null ? null : rowNo,
    "isEdit": isEdit == null ? null : isEdit,
    "registrationDate": registrationDate,
    "chequeMailTo": chequeMailTo,
    "addressID_ChequeMailToAddress": addressIdChequeMailToAddress,
    "totalParts": totalParts == null ? null : totalParts,
    "notScannedParts": notScannedParts == null ? null : notScannedParts,
    "scannedParts": scannedParts == null ? null : scannedParts,
    "isAutoGeneratedCode": isAutoGeneratedCode == null ? null : isAutoGeneratedCode,
    "autoGeneratedCode": autoGeneratedCode,
    "companyLogoPic": companyLogoPic,
    "templateID": templateId == null ? null : templateId,
    "companyAddressForASN": companyAddressForAsn == null ? null : companyAddressForAsn,
    "isInvoiceCreatedOrNot": isInvoiceCreatedOrNot == null ? null : isInvoiceCreatedOrNot,
    "companyColorCode": companyColorCode,
  };
}

class ContainerData {
  ContainerData({
    this.containerId,
    this.containerCode,
    this.containerName,
    this.title,
    this.detail,
    this.companyId,
    this.airReceivingLocationId,
    this.warehouseId,
    this.receivingTypeTerm,
    this.dateOfShipment,
    this.eta,
    this.ata,
    this.conainerStatusTerm,
    this.unloadingProgress,
    this.trackingNo,
    this.uploadFileId,
    this.isActive,
    this.updatelog,
    this.shipperId,
    this.receivingLocationId,
    this.createdBy,
    this.createdOn,
    this.updatedBy,
    this.updatedOn,
    this.isManualEntry,
    this.manualEntry,
    this.isAbleToShowManualEntryyBtn,
    this.totalCount,
    this.rowNo,
    this.isEdit,
    this.containerPartCount,
    this.warehouseName,
    this.shipperName,
    this.airWarehouseId,
    this.airShipperId,
    this.airTrackingNo,
    this.airEta,
    this.airDateOfShipment,
    this.airDetail,
    this.airShipperName,
    this.etaDate,
    this.uploadContainerPartFile,
    this.isAutoGeneratedCode,
    this.autoGeneratedCode,
    this.receivingLocationName,
    this.airReceivingQtyId,
    this.containerPartsId,
    this.subTrackingNo,
    this.itemName,
    this.boxBarcode,
    this.partQty,
    this.monthYearDisplay,
    this.scanOnStr,
    this.statusTerm,
    this.receivedDate,
    this.completedDate,
    this.receivedDateStr,
    this.completedDateStr,
  });

  int? containerId;
  String? containerCode;
  String? containerName;
  String? title;
  String? detail;
  int? companyId;
  int? airReceivingLocationId;
  int? warehouseId;
  String? receivingTypeTerm;
  String? dateOfShipment;
  String? eta;
  DateTime? ata;
  String? conainerStatusTerm;
  int? unloadingProgress;
  String? trackingNo;
  int? uploadFileId;
  bool? isActive;
  DateTime? updatelog;
  int? shipperId;
  int? receivingLocationId;
  int? createdBy;
  DateTime? createdOn;
  int? updatedBy;
  DateTime? updatedOn;
  bool? isManualEntry;
  String? manualEntry;
  bool? isAbleToShowManualEntryyBtn;
  int? totalCount;
  int? rowNo;
  bool? isEdit;
  int? containerPartCount;
  String? warehouseName;
  String? shipperName;
  int? airWarehouseId;
  int? airShipperId;
  dynamic airTrackingNo;
  dynamic airEta;
  dynamic airDateOfShipment;
  dynamic airDetail;
  dynamic airShipperName;
  dynamic etaDate;
  dynamic uploadContainerPartFile;
  bool? isAutoGeneratedCode;
  dynamic autoGeneratedCode;
  dynamic receivingLocationName;
  dynamic airReceivingQtyId;
  String? containerPartsId;
  dynamic subTrackingNo;
  dynamic itemName;
  dynamic boxBarcode;
  String? partQty;
  String? monthYearDisplay;
  dynamic scanOnStr;
  String? statusTerm;
  String? receivedDate;
  String? completedDate;
  String? receivedDateStr;
  String? completedDateStr;

  factory ContainerData.fromJson(Map<String, dynamic> json) => ContainerData(
    containerId: json["containerID"] == null ? null : json["containerID"],
    containerCode: json["containerCode"],
    containerName: json["containerName"] == null ? null : json["containerName"],
    title: json["title"],
    detail: json["detail"],
    companyId: json["companyID"] == null ? null : json["companyID"],
    airReceivingLocationId: json["airReceivingLocationID"] == null ? null : json["airReceivingLocationID"],
    warehouseId: json["warehouseID"] == null ? null : json["warehouseID"],
    receivingTypeTerm: json["receivingType_Term"] == null ? null : json["receivingType_Term"],
    dateOfShipment: json["dateOfShipment"],
    eta: json["eta"],
    ata: json["ata"] == null ? null : DateTime.parse(json["ata"]),
    conainerStatusTerm: json["conainerStatus_Term"] == null ? null : json["conainerStatus_Term"],
    unloadingProgress: json["unloadingProgress"] == null ? null : json["unloadingProgress"],
    trackingNo: json["trackingNo"],
    uploadFileId: json["uploadFileID"] == null ? null : json["uploadFileID"],
    isActive: json["isActive"] == null ? null : json["isActive"],
    updatelog: json["updatelog"] == null ? null : DateTime.parse(json["updatelog"]),
    shipperId: json["shipperID"] == null ? null : json["shipperID"],
    receivingLocationId: json["receivingLocationID"] == null ? null : json["receivingLocationID"],
    createdBy: json["createdBy"] == null ? null : json["createdBy"],
    createdOn: json["createdOn"] == null ? null : DateTime.parse(json["createdOn"]),
    updatedBy: json["updatedBy"] == null ? null : json["updatedBy"],
    updatedOn: json["updatedOn"] == null ? null : DateTime.parse(json["updatedOn"]),
    isManualEntry: json["isManualEntry"] == null ? null : json["isManualEntry"],
    manualEntry: json["manualEntry"] == null ? null : json["manualEntry"],
    isAbleToShowManualEntryyBtn: json["isAbleToShowManualEntryyBTN"] == null ? null : json["isAbleToShowManualEntryyBTN"],
    totalCount: json["totalCount"] == null ? null : json["totalCount"],
    rowNo: json["rowNo"] == null ? null : json["rowNo"],
    isEdit: json["isEdit"] == null ? null : json["isEdit"],
    containerPartCount: json["containerPartCount"] == null ? null : json["containerPartCount"],
    warehouseName: json["warehouseName"],
    shipperName: json["shipperName"],
    airWarehouseId: json["air_WarehouseID"] == null ? null : json["air_WarehouseID"],
    airShipperId: json["air_ShipperID"] == null ? null : json["air_ShipperID"],
    airTrackingNo: json["air_TrackingNo"],
    airEta: json["air_ETA"],
    airDateOfShipment: json["air_DateOfShipment"],
    airDetail: json["air_Detail"],
    airShipperName: json["air_ShipperName"],
    etaDate: json["etaDate"],
    uploadContainerPartFile: json["uploadContainerPartFile"],
    isAutoGeneratedCode: json["isAutoGeneratedCode"] == null ? null : json["isAutoGeneratedCode"],
    autoGeneratedCode: json["autoGeneratedCode"],
    receivingLocationName: json["receivingLocationName"],
    airReceivingQtyId: json["airReceivingQtyID"],
    containerPartsId: json["containerPartsID"],
    subTrackingNo: json["subTrackingNo"],
    itemName: json["itemName"],
    boxBarcode: json["boxBarcode"],
    partQty: json["partQty"],
    monthYearDisplay: json["monthYearDisplay"],
    scanOnStr: json["scanOnStr"],
    statusTerm: json["status_Term"],
    receivedDate: json["receivedDate"],
    completedDate: json["completedDate"],
    receivedDateStr: json["receivedDateStr"],
    completedDateStr: json["completedDateStr"],
  );

  Map<String, dynamic> toJson() => {
    "containerID": containerId == null ? null : containerId,
    "containerCode": containerCode,
    "containerName": containerName == null ? null : containerName,
    "title": title,
    "detail": detail,
    "companyID": companyId == null ? null : companyId,
    "airReceivingLocationID": airReceivingLocationId == null ? null : airReceivingLocationId,
    "warehouseID": warehouseId == null ? null : warehouseId,
    "receivingType_Term": receivingTypeTerm == null ? null : receivingTypeTerm,
    "dateOfShipment": dateOfShipment,
    "eta": eta,
    "ata": ata == null ? null : ata?.toIso8601String(),
    "conainerStatus_Term": conainerStatusTerm == null ? null : conainerStatusTerm?.trim(),
    "unloadingProgress": unloadingProgress == null ? null : unloadingProgress,
    "trackingNo": trackingNo,
    "uploadFileID": uploadFileId == null ? null : uploadFileId,
    "isActive": isActive == null ? null : isActive,
    "updatelog": updatelog == null ? null : updatelog?.toIso8601String(),
    "shipperID": shipperId == null ? null : shipperId,
    "receivingLocationID": receivingLocationId == null ? null : receivingLocationId,
    "createdBy": createdBy == null ? null : createdBy,
    "createdOn": createdOn == null ? null : createdOn?.toIso8601String(),
    "updatedBy": updatedBy == null ? null : updatedBy,
    "updatedOn": updatedOn == null ? null : updatedOn?.toIso8601String(),
    "isManualEntry": isManualEntry == null ? null : isManualEntry,
    "manualEntry": manualEntry == null ? null : manualEntry,
    "isAbleToShowManualEntryyBTN": isAbleToShowManualEntryyBtn == null ? null : isAbleToShowManualEntryyBtn,
    "totalCount": totalCount == null ? null : totalCount,
    "rowNo": rowNo == null ? null : rowNo,
    "isEdit": isEdit == null ? null : isEdit,
    "containerPartCount": containerPartCount == null ? null : containerPartCount,
    "warehouseName": warehouseName,
    "shipperName": shipperName,
    "air_WarehouseID": airWarehouseId == null ? null : airWarehouseId,
    "air_ShipperID": airShipperId == null ? null : airShipperId,
    "air_TrackingNo": airTrackingNo,
    "air_ETA": airEta,
    "air_DateOfShipment": airDateOfShipment,
    "air_Detail": airDetail,
    "air_ShipperName": airShipperName,
    "etaDate": etaDate,
    "uploadContainerPartFile": uploadContainerPartFile,
    "isAutoGeneratedCode": isAutoGeneratedCode == null ? null : isAutoGeneratedCode,
    "autoGeneratedCode": autoGeneratedCode,
    "receivingLocationName": receivingLocationName,
    "airReceivingQtyID": airReceivingQtyId,
    "containerPartsID": containerPartsId?.trim(),
    "subTrackingNo": subTrackingNo,
    "itemName": itemName,
    "boxBarcode": boxBarcode,
    "partQty": partQty,
    "monthYearDisplay": monthYearDisplay,
    "scanOnStr": scanOnStr,
    "status_Term": statusTerm,
    "receivedDate": receivedDate,
    "completedDate": completedDate,
    "receivedDateStr": receivedDateStr,
    "completedDateStr": completedDateStr,
  };
}
