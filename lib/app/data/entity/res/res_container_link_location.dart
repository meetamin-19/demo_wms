
class ResContainerLinkLocation {
  ResContainerLinkLocation({
    this.success,
    this.message,
    this.data,
    this.statusCode,
    this.statusValueCode,
  });

  bool? success;
  String? message;
  ResContainerLinkLocationData? data;
  int? statusCode;
  int? statusValueCode;

  factory ResContainerLinkLocation.fromJson(Map<String, dynamic> json) => ResContainerLinkLocation(
    success: json["success"] == null ? null : json["success"],
    message: json["message"] == null ? null : json["message"],
    data: json["data"] == null ? null : ResContainerLinkLocationData.fromJson(json["data"]),
    statusCode: json["statusCode"] == null ? null : json["statusCode"],
    statusValueCode: json["statusValueCode"] == null ? null : json["statusValueCode"],
  );

  Map<String, dynamic> toJson() => {
    "success": success == null ? null : success,
    "message": message == null ? null : message,
    "data": data == null ? null : data!.toJson(),
    "statusCode": statusCode == null ? null : statusCode,
    "statusValueCode": statusValueCode == null ? null : statusValueCode,
  };
}

class ResContainerLinkLocationData {
  ResContainerLinkLocationData({
    this.container,
    this.warehouseLocationlist,
  });

  ResContainerLinkLocationContainer? container;
  List<WarehouseLocationlist>? warehouseLocationlist;

  factory ResContainerLinkLocationData.fromJson(Map<String, dynamic> json) => ResContainerLinkLocationData(
    container: json["container"] == null ? null : ResContainerLinkLocationContainer.fromJson(json["container"]),
    warehouseLocationlist: json["warehouseLocationlist"] == null ? null : List<WarehouseLocationlist>.from(json["warehouseLocationlist"].map((x) => WarehouseLocationlist.fromJson(x))),
  );

  Map<String, dynamic> toJson() => {
    "container": container == null ? null : container!.toJson(),
    "warehouseLocationlist": warehouseLocationlist == null ? null : List<dynamic>.from(warehouseLocationlist!.map((x) => x.toJson())),
  };
}

class ResContainerLinkLocationContainer {
  ResContainerLinkLocationContainer({
    this.containerId,
    this.containerCode,
    this.containerName,
    this.title,
    this.detail,
    this.companyId,
    this.airReceivingLocationId,
    this.warehouseId,
    this.receivingTypeTerm,
    this.dateOfShipment,
    this.eta,
    this.ata,
    this.conainerStatusTerm,
    this.unloadingProgress,
    this.trackingNo,
    this.uploadFileId,
    this.isActive,
    this.updatelog,
    this.shipperId,
    this.receivingLocationId,
    this.createdBy,
    this.createdOn,
    this.updatedBy,
    this.updatedOn,
    this.isManualEntry,
    this.manualEntry,
    this.isAbleToShowManualEntryyBtn,
    this.totalCount,
    this.rowNo,
    this.isEdit,
    this.containerPartCount,
    this.warehouseName,
    this.shipperName,
    this.airWarehouseId,
    this.airShipperId,
    this.airTrackingNo,
    this.airEta,
    this.airDateOfShipment,
    this.airDetail,
    this.airShipperName,
    this.etaDate,
    this.uploadContainerPartFile,
    this.isAutoGeneratedCode,
    this.autoGeneratedCode,
    this.receivingLocationName,
    this.airReceivingQtyId,
    this.containerPartsId,
    this.subTrackingNo,
    this.itemName,
    this.boxBarcode,
    this.partQty,
    this.monthYearDisplay,
    this.scanOnStr,
    this.statusTerm,
    this.receivedDate,
    this.completedDate,
    this.receivedDateStr,
    this.completedDateStr,
  });

  int? containerId;
  String? containerCode;
  String? containerName;
  String? title;
  dynamic? detail;
  int? companyId;
  int? airReceivingLocationId;
  int? warehouseId;
  String? receivingTypeTerm;
  DateTime? dateOfShipment;
  DateTime? eta;
  DateTime? ata;
  String? conainerStatusTerm;
  int? unloadingProgress;
  String? trackingNo;
  int? uploadFileId;
  bool? isActive;
  DateTime? updatelog;
  int? shipperId;
  int? receivingLocationId;
  int? createdBy;
  DateTime? createdOn;
  int? updatedBy;
  DateTime? updatedOn;
  bool? isManualEntry;
  dynamic? manualEntry;
  bool? isAbleToShowManualEntryyBtn;
  int? totalCount;
  int? rowNo;
  bool? isEdit;
  int? containerPartCount;
  dynamic? warehouseName;
  dynamic? shipperName;
  int? airWarehouseId;
  int? airShipperId;
  dynamic? airTrackingNo;
  dynamic? airEta;
  dynamic? airDateOfShipment;
  dynamic? airDetail;
  dynamic? airShipperName;
  dynamic? etaDate;
  dynamic? uploadContainerPartFile;
  bool? isAutoGeneratedCode;
  dynamic? autoGeneratedCode;
  dynamic? receivingLocationName;
  dynamic? airReceivingQtyId;
  dynamic? containerPartsId;
  dynamic? subTrackingNo;
  dynamic? itemName;
  dynamic? boxBarcode;
  dynamic? partQty;
  dynamic? monthYearDisplay;
  dynamic? scanOnStr;
  dynamic? statusTerm;
  dynamic? receivedDate;
  dynamic? completedDate;
  dynamic? receivedDateStr;
  dynamic? completedDateStr;

  factory ResContainerLinkLocationContainer.fromJson(Map<String, dynamic> json) => ResContainerLinkLocationContainer(
    containerId: json["containerID"] == null ? null : json["containerID"],
    containerCode: json["containerCode"] == null ? null : json["containerCode"],
    containerName: json["containerName"] == null ? null : json["containerName"],
    title: json["title"] == null ? null : json["title"],
    detail: json["detail"],
    companyId: json["companyID"] == null ? null : json["companyID"],
    airReceivingLocationId: json["airReceivingLocationID"] == null ? null : json["airReceivingLocationID"],
    warehouseId: json["warehouseID"] == null ? null : json["warehouseID"],
    receivingTypeTerm: json["receivingType_Term"] == null ? null : json["receivingType_Term"],
    dateOfShipment: json["dateOfShipment"] == null ? null : DateTime.parse(json["dateOfShipment"]),
    eta: json["eta"] == null ? null : DateTime.parse(json["eta"]),
    ata: json["ata"] == null ? null : DateTime.parse(json["ata"]),
    conainerStatusTerm: json["conainerStatus_Term"] == null ? null : json["conainerStatus_Term"],
    unloadingProgress: json["unloadingProgress"] == null ? null : json["unloadingProgress"],
    trackingNo: json["trackingNo"] == null ? null : json["trackingNo"],
    uploadFileId: json["uploadFileID"] == null ? null : json["uploadFileID"],
    isActive: json["isActive"] == null ? null : json["isActive"],
    updatelog: json["updatelog"] == null ? null : DateTime.parse(json["updatelog"]),
    shipperId: json["shipperID"] == null ? null : json["shipperID"],
    receivingLocationId: json["receivingLocationID"] == null ? null : json["receivingLocationID"],
    createdBy: json["createdBy"] == null ? null : json["createdBy"],
    createdOn: json["createdOn"] == null ? null : DateTime.parse(json["createdOn"]),
    updatedBy: json["updatedBy"] == null ? null : json["updatedBy"],
    updatedOn: json["updatedOn"] == null ? null : DateTime.parse(json["updatedOn"]),
    isManualEntry: json["isManualEntry"] == null ? null : json["isManualEntry"],
    manualEntry: json["manualEntry"],
    isAbleToShowManualEntryyBtn: json["isAbleToShowManualEntryyBTN"] == null ? null : json["isAbleToShowManualEntryyBTN"],
    totalCount: json["totalCount"] == null ? null : json["totalCount"],
    rowNo: json["rowNo"] == null ? null : json["rowNo"],
    isEdit: json["isEdit"] == null ? null : json["isEdit"],
    containerPartCount: json["containerPartCount"] == null ? null : json["containerPartCount"],
    warehouseName: json["warehouseName"],
    shipperName: json["shipperName"],
    airWarehouseId: json["air_WarehouseID"] == null ? null : json["air_WarehouseID"],
    airShipperId: json["air_ShipperID"] == null ? null : json["air_ShipperID"],
    airTrackingNo: json["air_TrackingNo"],
    airEta: json["air_ETA"],
    airDateOfShipment: json["air_DateOfShipment"],
    airDetail: json["air_Detail"],
    airShipperName: json["air_ShipperName"],
    etaDate: json["etaDate"],
    uploadContainerPartFile: json["uploadContainerPartFile"],
    isAutoGeneratedCode: json["isAutoGeneratedCode"] == null ? null : json["isAutoGeneratedCode"],
    autoGeneratedCode: json["autoGeneratedCode"],
    receivingLocationName: json["receivingLocationName"],
    airReceivingQtyId: json["airReceivingQtyID"],
    containerPartsId: json["containerPartsID"],
    subTrackingNo: json["subTrackingNo"],
    itemName: json["itemName"],
    boxBarcode: json["boxBarcode"],
    partQty: json["partQty"],
    monthYearDisplay: json["monthYearDisplay"],
    scanOnStr: json["scanOnStr"],
    statusTerm: json["status_Term"],
    receivedDate: json["receivedDate"],
    completedDate: json["completedDate"],
    receivedDateStr: json["receivedDateStr"],
    completedDateStr: json["completedDateStr"],
  );

  Map<String, dynamic> toJson() => {
    "containerID": containerId == null ? null : containerId,
    "containerCode": containerCode == null ? null : containerCode,
    "containerName": containerName == null ? null : containerName,
    "title": title == null ? null : title,
    "detail": detail,
    "companyID": companyId == null ? null : companyId,
    "airReceivingLocationID": airReceivingLocationId == null ? null : airReceivingLocationId,
    "warehouseID": warehouseId == null ? null : warehouseId,
    "receivingType_Term": receivingTypeTerm == null ? null : receivingTypeTerm,
    "dateOfShipment": dateOfShipment == null ? null : dateOfShipment!.toIso8601String(),
    "eta": eta == null ? null : eta!.toIso8601String(),
    "ata": ata == null ? null : ata!.toIso8601String(),
    "conainerStatus_Term": conainerStatusTerm == null ? null : conainerStatusTerm,
    "unloadingProgress": unloadingProgress == null ? null : unloadingProgress,
    "trackingNo": trackingNo == null ? null : trackingNo,
    "uploadFileID": uploadFileId == null ? null : uploadFileId,
    "isActive": isActive == null ? null : isActive,
    "updatelog": updatelog == null ? null : updatelog!.toIso8601String(),
    "shipperID": shipperId == null ? null : shipperId,
    "receivingLocationID": receivingLocationId == null ? null : receivingLocationId,
    "createdBy": createdBy == null ? null : createdBy,
    "createdOn": createdOn == null ? null : createdOn!.toIso8601String(),
    "updatedBy": updatedBy == null ? null : updatedBy,
    "updatedOn": updatedOn == null ? null : updatedOn!.toIso8601String(),
    "isManualEntry": isManualEntry == null ? null : isManualEntry,
    "manualEntry": manualEntry,
    "isAbleToShowManualEntryyBTN": isAbleToShowManualEntryyBtn == null ? null : isAbleToShowManualEntryyBtn,
    "totalCount": totalCount == null ? null : totalCount,
    "rowNo": rowNo == null ? null : rowNo,
    "isEdit": isEdit == null ? null : isEdit,
    "containerPartCount": containerPartCount == null ? null : containerPartCount,
    "warehouseName": warehouseName,
    "shipperName": shipperName,
    "air_WarehouseID": airWarehouseId == null ? null : airWarehouseId,
    "air_ShipperID": airShipperId == null ? null : airShipperId,
    "air_TrackingNo": airTrackingNo,
    "air_ETA": airEta,
    "air_DateOfShipment": airDateOfShipment,
    "air_Detail": airDetail,
    "air_ShipperName": airShipperName,
    "etaDate": etaDate,
    "uploadContainerPartFile": uploadContainerPartFile,
    "isAutoGeneratedCode": isAutoGeneratedCode == null ? null : isAutoGeneratedCode,
    "autoGeneratedCode": autoGeneratedCode,
    "receivingLocationName": receivingLocationName,
    "airReceivingQtyID": airReceivingQtyId,
    "containerPartsID": containerPartsId,
    "subTrackingNo": subTrackingNo,
    "itemName": itemName,
    "boxBarcode": boxBarcode,
    "partQty": partQty,
    "monthYearDisplay": monthYearDisplay,
    "scanOnStr": scanOnStr,
    "status_Term": statusTerm,
    "receivedDate": receivedDate,
    "completedDate": completedDate,
    "receivedDateStr": receivedDateStr,
    "completedDateStr": completedDateStr,
  };
}

class WarehouseLocationlist {
  WarehouseLocationlist({
    this.text,
    this.value,
    this.selected,
    this.disabled,
     this.data,
    this.data1,
    this.data2,
    this.data3,
    this.data4,
    this.data5,
    this.data6,
    this.data7,
    this.data8,
    this.data9,
    this.data10,
  });

  String? text;
  String? value;
  bool? selected;
  bool? disabled;
   dynamic data;
  String? data1;
  String? data2;
  String? data3;
  dynamic data4;
  dynamic data5;
  dynamic data6;
  dynamic data7;
  dynamic data8;
  dynamic data9;
  dynamic data10;

  factory WarehouseLocationlist.fromJson(Map<String, dynamic> json) => WarehouseLocationlist(
    text: json["text"] == null ? null : json["text"],
    value: json["value"] == null ? null : json["value"],
    selected: json["selected"] == null ? null : json["selected"],
    disabled: json["disabled"] == null ? null : json["disabled"],
    data: json["data"],
    data1: json["data1"] == null ? null : json["data1"],
    data2: json["data2"] == null ? null :json["data2"],
    data3: json["data3"] == null ? null : json["data3"],
    data4: json["data4"],
    data5: json["data5"],
    data6: json["data6"],
    data7: json["data7"],
    data8: json["data8"],
    data9: json["data9"],
    data10: json["data10"],
  );

  Map<String, dynamic> toJson() => {
    "text": text == null ? null : text,
    "value": value == null ? null : value,
    "selected": selected == null ? null : selected,
    "disabled": disabled == null ? null : disabled,
    "data": data,
    "data1": data1 == null ? null : data1,
    "data2": data2 == null ? null : data2,
    "data3": data3 == null ? null : data3,
    "data4": data4,
    "data5": data5,
    "data6": data6,
    "data7": data7,
    "data8": data8,
    "data9": data9,
    "data10": data10,
  };
}

// enum Data1 { W_3036_INDIANA }
//
// final data1Values = EnumValues({
//   "W : 3036 Indiana": Data1.W_3036_INDIANA
// });
//
// enum Data2 { S_A, S_R }
//
// final data2Values = EnumValues({
//   "S : A": Data2.S_A,
//   "S : R": Data2.S_R
// });
//
// enum Data3 { C_IMPERIAL_AUTO_INDUSTRIES_LTD }
//
// final data3Values = EnumValues({
//   "C : Imperial Auto Industries Ltd": Data3.C_IMPERIAL_AUTO_INDUSTRIES_LTD
// });
//
// class EnumValues<T> {
//   Map<String, T> map;
//   Map<T, String> reverseMap;
//
//   EnumValues(this.map);
//
//   Map<T, String> get reverse {
//     if (reverseMap == null) {
//       reverseMap = map.map((k, v) => new MapEntry(v, k));
//     }
//     return reverseMap;
//   }
// }
